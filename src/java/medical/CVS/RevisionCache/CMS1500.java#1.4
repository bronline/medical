/*
 * CMS1500.java
 *
 * Created on August 6, 2007, 9:34 AM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package medical;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.Hashtable;
import tools.RWConnMgr;
import tools.document.Document;
import tools.print.PagePrinter;

/**
 *
 * @author Randy Wandell
 */
public class CMS1500 extends Document {
    private RWConnMgr io;
    private PagePrinter pagePrinter=new PagePrinter();
    private ResultSet batchRs;
    private ResultSet repeatingMap;
    private ResultSet repeatingRs;
    private ResultSet patientRs;
    private ResultSet resourceRs;
    private ResultSet providerRs;
    private ResultSet documentRs;
    private ResultSet repeatingMapRs;
    private ResultSet environmentRs;
    private ResultSet conditionRs;
    
    private ArrayList repeatingItems=new ArrayList();
    private Hashtable diagnosisCodes=new Hashtable();
    private int repeatingOffset=24;
    private PreparedStatement stm;
    //RKW 11-11-08 - changed to remove cms1500charges
/*    private String codeQry="SELECT d.code FROM cms1500charges c " +
                       "left join items on items.code=c.code " +
                       "left join itemdiagnoses i on i.itemid=items.id " +
                       "left join diagnosiscodes d on d.id=i.diagnosisid " +
                       "where chargeid=?"; */
    private String codeQry="SELECT d.code FROM charges c " +
                        "left join itemdiagnoses i on c.itemid=i.itemid " +
                        "left join diagnosiscodes d on d.id=i.diagnosisid " +
                        "where c.id=";
    
    private int resourceId=0;
    private int conditionId=0;
    private String providerId;
    private boolean formFieldsSet = false;
    private String [][] documentData;
    private String [][] sortedArray;
    private int currentFormItem=0;
    private int lastChargeId=0;
    
    /** Creates a new instance of CMS1500 */
    public CMS1500() {
    }
    
    public CMS1500(RWConnMgr io) {
        setIo(io);
    }
    
    public void print(String batchId, String patientId) throws Exception {
        if(!formFieldsSet) { fillFormFields(batchId, patientId); }
        lastChargeId=0;
        ResultSet resourceChargesRs=io.opnRS("select distinct resourceid, conditionid from cms1500charges where patientid=" + patientId + " and batchid=" + batchId);
        while(resourceChargesRs.next()) {
            setResourceId(resourceChargesRs.getInt("resourceid"));
            setConditionId(resourceChargesRs.getInt("conditionid"));
            lastChargeId=0;
            do {
                fillFormFields(batchId, patientId); 
                pagePrinter.setStringArray(documentData);
                pagePrinter.setFontPlain();
                pagePrinter.print();
                repeatingRs =  io.opnRS("select * from cms1500charges where chargeId > " + lastChargeId + " and patientid=" + patientId + " and batchid=" + batchId + " and resourceid=" + resourceId + " and conditionid=" + getConditionId() + " order by batchid, patientid, resourceid, chargeid");
            } while (repeatingRs.next());
        }
    }
    
    public String preview(String batchId, String patientId) throws Exception {
//        if(!formFieldsSet) { fillFormFields(batchId, patientId); }
        lastChargeId=0;
        StringBuffer pv=new StringBuffer();
        int pageNumber=1;
        String displayStyle="";

        ResultSet resourceChargesRs=io.opnRS("select distinct resourceid from cms1500charges where patientid=" + patientId + " and batchid=" + batchId);
        while(resourceChargesRs.next()) {
            setResourceId(resourceChargesRs.getInt("resourceid"));
            lastChargeId=0;
            do {
                fillFormFields(batchId, patientId);
                pv.append("<table id=page" + pageNumber + " width=100% " + displayStyle + "><tr><td>\n");
                for(int x=0;x<documentData.length;x++) {
                    double leftPosition=Integer.parseInt(documentData[x][1])*1.2;
                    if(documentData[x][0] == null) { documentData[x][0]=""; }
                    if(documentData[x][4]== null || documentData[x][4].equals("0")) {
                        pv.append("<div style='font-size: 10pt; height: 10pt; font-family: courier new; position: absolute; left: " + leftPosition + "; top: " + documentData[x][2] + "; '>" + documentData[x][0] + "</div>\n");
                    } else {
                        pv.append("<div style='position: absolute; left: " + leftPosition + "; top: " + documentData[x][2] + "; '><input type=text name=field" + x + " value='" + documentData[x][0] + "' size=" + documentData[x][4] + " style='font-size: 10pt; height: 10pt; line-height: 7pt; font-family: courier new;'></div>\n");
                    }
                }
                pv.append("</td></tr></table>\n");
                displayStyle="style='visibility: hidden; display: none;'";
                pageNumber ++;
                repeatingRs =  io.opnRS("select * from cms1500charges where chargeId > " + lastChargeId + " and patientid=" + patientId + " and batchid=" + batchId + " and resourceid=" + resourceId + " order by batchid, patientid, resourceid, chargeid");
            } while (repeatingRs.next());
        }
            
        String pageSelection="";
        if(pageNumber>2) {
            String fontWeight="bold";
            for(int p=1;p<pageNumber;p++) {
                pageSelection += "<b onClick=showPage(" + p + ") id=link" + p + " style='font-weight: " + fontWeight + "; cursor: pointer;'>Page " + p + "</b>&nbsp;&nbsp;\n";
                fontWeight="normal";
            }
        }

        return pageSelection + pv.toString();
    }
    
    private void fillFormFields(String batchId, String patientId) throws Exception {
        currentFormItem=0;
        setBatchRs(batchId);
        setPatientRs(patientId);
        documentFields.clear();
        if(documentFields.size() == 0) {
            ResultSet docRs=io.opnRS("select * from documentmap where document='CMS1500'");            
            setDocumentMap(docRs);
        }
        
        clearDocumentFieldValues();
        
        repeatingRs=null;
        repeatingMap=null;
        resourceRs=null;
        environmentRs=null;
        repeatingMapRs=null;
        providerRs=null;

        // Get default values from environment table
        environmentRs=io.opnRS("select * from environment");
        if(environmentRs.next()) { 
//            setResourceId(environmentRs.getInt("defaultresource"));
            setDocumentFieldValue("pin", environmentRs.getString("pin"));
            setDocumentFieldValue("grp", environmentRs.getString("grp"));
            setDocumentFieldValue("taxid", environmentRs.getString("taxid"));
        }
        
        ResultSet batchRs=io.opnRS("select * from batches where id=" + batchId);
        if(batchRs.next()) { setProviderId(batchRs.getString("provider")); }
        
        documentRs=io.opnRS("select * from cms1500data where id=" + patientId + " and providerid=" + batchRs.getString("provider"));
        if(repeatingMapRs == null) { repeatingMapRs=io.opnRS("select * from repeatingmap"); }
        ResultSet repeatingDataRs=io.opnRS("select * from cms1500charges where chargeId > " + lastChargeId + " and patientid=" + patientId + " and batchid=" + batchId + " and resourceid=" + resourceId + " order by batchid, patientid, resourceid, chargeid");

        repeatingMapRs.beforeFirst();
        setRepeatingMap(repeatingMapRs);
        fillFieldsWithData(documentRs);
        setRepeatingRs(repeatingDataRs, patientId);
        
        for(int a=0;a<repeatingItems.size();a+=6) {
            int numItems=documentFields.size();
            for(int b=a;b<a+6;b++) {
                if(b<repeatingItems.size()) { numItems+=((Document)repeatingItems.get(b)).documentFields.size(); }
            }

            documentData=new String[numItems][4];
            int x=0;

            // Add the repeating items and calculate the total
            Document rpt;
            int dollars=0;
            int cents=0;
            for(int d=a;d<a+6;d++) {
                if(d<repeatingItems.size()) {
                    rpt=(Document)repeatingItems.get(d);

                    dollars += Integer.parseInt(rpt.getDocumentFieldValue("dollars"));
                    cents += Integer.parseInt(rpt.getDocumentFieldValue("cents")); 

                    for(Enumeration e=rpt.documentFields.keys(); e.hasMoreElements();) {
                        String key=(String)e.nextElement();
                        documentData[x]=(String [])rpt.documentFields.get(key);
                        x++;    
                    }
                }
            }
            
            double dollarsAndCents = ((double)dollars) + ((double)cents/100);
            String dollarAmount=""+dollarsAndCents;
            String centsAmount=dollarAmount.substring(dollarAmount.indexOf(".")+1);
            dollarAmount=dollarAmount.substring(0, dollarAmount.indexOf("."));
            
            if(centsAmount.trim().length()==1) { centsAmount = "0"+centsAmount; }

            setDocumentFieldValue("totaldollars", dollarAmount);            
            setDocumentFieldValue("totalcents", centsAmount);
            
            setDocumentFieldValue("balancedollars", dollarAmount);            
            setDocumentFieldValue("balancecents", centsAmount);
            
            doPatientInformation();
            doBox9();
            doInsuredsInformation(patientId);
            doBox12();
            doBox13();
            doBox14();
            doBox19(patientId);
            doBox20();
            doBox31();
            doBox32();
            doBox33();

            // Add the fields from the main document
            for(Enumeration e=documentFields.keys(); e.hasMoreElements();) {
                String key=(String)e.nextElement();
                documentData[x]=(String [])documentFields.get(key);
                x++;
            }

            sortedArray=new String[documentData.length][documentData[0].length];
//            sortedArray = new String[1000][5];
            sortArray(documentData, 2, true);
            documentData=sortedArray;
            
            removeSpecialCharactersFromData(documentData);
//            formFieldsSet=true;
        }
        
        documentRs.close();
        repeatingDataRs.close();
        batchRs.close();
        
        documentRs=null;
        repeatingDataRs=null;
    }
        
    private void sortArray(String [][] array, int sortField, boolean additionalSort) {
        // find distinct y-coordinates in documentData
        ArrayList sortItem=new ArrayList();
        for(int i=0;i<array.length;i++) { 
            if(!sortItem.contains("00000".substring(array[i][sortField].length())+array[i][sortField])) { 
                sortItem.add("00000".substring(documentData[i][sortField].length()) + documentData[i][sortField]); 
            } 
        }

        String [] dd1=new String[sortItem.size()];
        for(int i=0;i<sortItem.size();i++) {
            dd1[i]=(String)sortItem.get(i);
        }
        Arrays.sort(dd1);

        for(int i=0;i<dd1.length;i++) {
            int k=0;
            ArrayList formRow=new ArrayList();
            String [][] dd=new String[array.length][array[0].length];
            for(int j=0;j<array.length;j++) {
                if(("00000".substring(array[j][sortField].length()) + array[j][sortField]).equals(dd1[i])) {
                    dd[k]=array[j];
                    formRow.add(array[j]);
                    k++;
                }
            }
            String [][] ddx=new String[formRow.size()][dd[k].length];
            for(int j=0;j<ddx.length;j++) { ddx[j]=(String[])formRow.get(j); }
            if(additionalSort && ddx.length>1) { 
                ddx=sortArray(ddx, 1);
            }
            for(int j=0;j<ddx.length;j++) {
                sortedArray[currentFormItem]=ddx[j];
                currentFormItem++;
            }
        }

    }
    
    private String[][] sortArray(String [][] array, int sortField) {
        // find distinct y-coordinates in documentData
        String [][] ddx = new String[1][5];
        ArrayList sortItem=new ArrayList();
        for(int i=0;i<array.length;i++) { 
//            if(!sortItem.contains("00000".substring(array[i][sortField].length())+array[i][sortField])) { 
                sortItem.add("00000".substring(array[i][sortField].length()) + array[i][sortField]); 
//            } 
        }

        String [] dd1=new String[sortItem.size()];
        for(int i=0;i<sortItem.size();i++) {
            dd1[i]=(String)sortItem.get(i);
        }

        Arrays.sort(dd1);

        String [][] dd=new String[array.length][array[0].length];
        ArrayList sortedItems=new ArrayList();
        int k=0;
        
        for(int i=0;i<dd1.length;i++) {
            for(int j=0;j<array.length;j++) {
                if(("00000".substring(array[j][sortField].length()) + array[j][sortField]).equals(dd1[i])) {
                    dd[k]=array[j];
                    sortedItems.add(array[j]);
                    k++;
                    break;
                }
            }
        }
        
        ddx=new String[sortedItems.size()][dd[0].length];
        for(int j=0;j<ddx.length;j++) { ddx[j]=(String[])sortedItems.get(j); }
        
        return ddx;
    }

    private void clearDocumentFieldValues() {
        for(Enumeration e=documentFields.keys(); e.hasMoreElements();) {
            String key=(String)e.nextElement();
            setDocumentFieldValue(key, "");
        }
    }
    
    private void buildRepeatingItems(String patientId) throws Exception {
//        String patientId="";

        repeatingRs.beforeFirst();
//        if(repeatingRs.next()) { patientId=repeatingRs.getString("patientId"); }
        loadPatientDiagnosisCodes(patientId);

        repeatingItems.clear();
        
        stm=repeatingRs.getStatement().getConnection().prepareStatement(codeQry);

        repeatingRs.beforeFirst();
        int currentOffset=0;
        int itemCount=0;
        
        while(repeatingRs.next()) {
            if(itemCount == 6) { currentOffset=0; itemCount=0; break;}
//            if(repeatingRs.getInt("resourceid") != resourceId) { setResourceId(repeatingRs.getInt("resourceid")); }
            Document document=new Document(repeatingMap);
            document.fillRepeatingFieldsWithData(repeatingRs, currentOffset);
            document.setDocumentFieldValue("frommonth", document.getDocumentFieldValue("month"));
            document.setDocumentFieldValue("fromday", document.getDocumentFieldValue("day"));
            document.setDocumentFieldValue("fromyear", document.getDocumentFieldValue("year"));
            document.setDocumentFieldYCoord("frommonth", document.getDocumentFieldYCoord("month"));
            document.setDocumentFieldYCoord("fromday", document.getDocumentFieldYCoord("day"));
            document.setDocumentFieldYCoord("fromyear", document.getDocumentFieldYCoord("year"));
            document.setDocumentFieldValue("diagnosiscode", checkForDiagnosisCode(repeatingRs.getString("chargeId")));
            setItemModifier(repeatingRs, document);
            repeatingItems.add(document);
            currentOffset += repeatingOffset;
            itemCount++;
            lastChargeId = repeatingRs.getInt("chargeid");
            
        }

    }
    
    private void setItemModifier(ResultSet rs, Document document) throws Exception {
        document.setDocumentFieldValue("modifier", "");
        patientRs.beforeFirst();
        if(patientRs.next()) {
            // First, get the item id for the charge
            ResultSet chgRs=io.opnRS("select itemid from charges where id=" + rs.getString("chargeid"));
            if(chgRs.next()) {
                // Check to see if there is a modifier for this item at the provider level
                ResultSet lRs=io.opnRS("select modifier from defaultpayments where patientid=0 and providerid=" + providerId + " and itemid=" + chgRs.getString("itemid"));
                if(lRs.next()) {
                    if(!lRs.getString("modifier").equals("")) { document.setDocumentFieldValue("modifier", lRs.getString("modifier")); }
                } else {
                    // Check to see if there is a modifier set for the patient
                    lRs.close();
                    lRs=null;
                    lRs=io.opnRS("select modifier from defaultpayments where patientid=" + patientRs.getString("id") + " and providerid=" + providerId + " and itemid=" + chgRs.getString("itemid"));
                    if(lRs.next()) {
                        if(!lRs.getString("modifier").equals("")) { document.setDocumentFieldValue("modifier", lRs.getString("modifier")); }
                    }
                }
                lRs.close();
                lRs=null;
            }
            chgRs.close();
            chgRs=null;
        }
    }

    public void loadPatientDiagnosisCodes(String patientId) throws Exception {
        diagnosisCodes.clear();
        
        String sqlStatement="SELECT diagnosisid, code FROM patientsymptoms " +
                            "join diagnosiscodes on diagnosisid=diagnosiscodes.id " +
                            "where patientid=" + patientId + " order by sequence";
        
        PreparedStatement lPs=repeatingMap.getStatement().getConnection().prepareStatement(sqlStatement);
        ResultSet lRs=lPs.executeQuery();
        
        int currentCode=1;
        while(lRs.next() && currentCode<5) {
            String code=lRs.getString("code");
            String subCode="";
            
            try {
                subCode=code.substring(code.indexOf(".") +1);
                code=code.substring(0, code.indexOf("."));
            } catch (Exception subCodeException) {
            }
            
            setDocumentFieldValue("21_" + currentCode + "a", code);
            setDocumentFieldValue("21_" + currentCode + "b", subCode);
            
            diagnosisCodes.put(lRs.getString("code"), ""+currentCode);
            currentCode ++;
        }
        
        lRs.close();

    }
    
    private String checkForDiagnosisCode(String chargeId) {
        String codeList="";
        String [] codes=new String[diagnosisCodes.size()];
        int numberOfCodesFound=0;
    
        try {
            stm.setString(1, chargeId);
            ResultSet tmpCodes=stm.executeQuery();
            while(tmpCodes.next() && numberOfCodesFound<4) {
                if(diagnosisCodes.containsKey(tmpCodes.getString("code"))) {
                    String codeId=(String)diagnosisCodes.get(tmpCodes.getString("code"));
                    if(codeList.indexOf(codeId)<0) {
                        codeList += codeId;
                        codes[numberOfCodesFound]=codeId;
                        numberOfCodesFound ++;
                    }
                } 
            }
        } catch (Exception e){
        }
        
        for(int x=0;x<codes.length;x++) { if(codes[x] == null) { codes[x]=""; } }
        
        if(codes != null && codes.length>0) { Arrays.sort(codes); }
        codeList="";
        for(int x=0;x<codes.length;x++) { codeList += codes[x]; }

        return codeList;
    }
    
    private void removeSpecialCharactersFromData(String [][] documentData) {
        for(int x=0;x<documentData.length;x++) {
            if(documentData[x][0] != null) {
                documentData[x][0]=documentData[x][0].replaceAll("\r","");
                documentData[x][0]=documentData[x][0].replaceAll("\n","");
            }
        }
    }
    
    private void doPatientInformation() throws Exception {
        patientRs.beforeFirst();
        if(patientRs.next()) {
            // Check to see if the patient has an insurance record with this provider on it
            ResultSet patInfoRs=io.opnRS("select * from insuranceinformation where patientid=" + patientRs.getString("id") + " and providerid=" + providerId);
            if(patInfoRs.next()) {
                setDocumentFieldsFromResultSet(patInfoRs);
            } else {
                // Check to see if the patient insurance info is derrived from the billing account
                patInfoRs.close();
                patInfoRs=null;
                patInfoRs=io.opnRS("select * from insuranceinformation where patientid in (select id from patients where accountnumber='" + patientRs.getString("billingaccount") + "')");
                if(patInfoRs.next()) { setDocumentFieldsFromResultSet(patInfoRs); }
            }
            setDocumentFieldValue("patientname", patientRs.getString("lastname").trim() + ", " + patientRs.getString("firstname"));
            setDocumentFieldValue("patientaddress", patientRs.getString("address"));
            setDocumentFieldValue("patientcity", patientRs.getString("city"));
            setDocumentFieldValue("patientstate", patientRs.getString("state"));
            setDocumentFieldValue("patientzip", patientRs.getString("zipcode"));
            try {
                setDocumentFieldValue("patientareacode", patientRs.getString("homephone").substring(0,3));
                setDocumentFieldValue("patientphone", patientRs.getString("homephone").substring(3));
            } catch (Exception patientPhoneException) {
            }

            setDocumentFieldValue("patientbirthyear", "");
            setDocumentFieldValue("patientbirthmonth", "");
            setDocumentFieldValue("patientbirthday", "");
            
            if(!patientRs.getString("dob").equals("0001-01-01")) {
                setDocumentFieldValue("patientbirthyear", patientRs.getString("dob").substring(0,4));
                setDocumentFieldValue("patientbirthmonth", patientRs.getString("dob").substring(5,7));
                setDocumentFieldValue("patientbirthday", patientRs.getString("dob").substring(8));
            }

            patInfoRs.close();
            patInfoRs=null;
            
            patInfoRs=io.opnRS("select * from billingaccounts where id=" + patientRs.getString("id"));
            if(patInfoRs.next()) { setDocumentFieldsFromResultSet(patInfoRs); }

            patInfoRs.close();
            patInfoRs=null;
        }
    }
    
    private void doBox9() {
        try {
            repeatingRs.beforeFirst();
            if(repeatingRs.next()) {
                setDocumentFieldValue("otherhpno", "X");
                setDocumentFieldValue("otherhpyes", "");
                PreparedStatement bchPs=repeatingRs.getStatement().getConnection().prepareStatement("select * from batches where id=" + repeatingRs.getString("batchid"));
                PreparedStatement insPs=repeatingRs.getStatement().getConnection().prepareStatement("select * from patientinsurance left join providers on providers.id=patientinsurance.providerid where patientid=" + repeatingRs.getString("patientId") + " order by primaryprovider");
                ResultSet insRs=insPs.executeQuery();
                if(insRs.last()) {
                    ResultSet bchRs=bchPs.executeQuery();
                    bchRs.next();
                    int lastProvider=insRs.getRow();
                    insRs.beforeFirst();
                    while(insRs.next()) {
                        if(lastProvider>1 && insRs.getInt("providerid") == bchRs.getInt("provider")) {
                            if(insRs.next()) {
                                setDocumentFieldValue("9", getDocumentFieldValue("insuredname"));
                                setDocumentFieldValue("9apolicy", insRs.getString("providergroup"));
                                setDocumentFieldValue("9bmm", getDocumentFieldValue("insuredbirthmonth"));
                                setDocumentFieldValue("9bdd", getDocumentFieldValue("insuredbirthday"));
                                setDocumentFieldValue("9byy", getDocumentFieldValue("insuredbirthyear"));
                                setDocumentFieldValue("9sexm", getDocumentFieldValue("insuredmale"));
                                setDocumentFieldValue("9sexf", getDocumentFieldValue("insuredfemale"));
                                setDocumentFieldValue("9c", getDocumentFieldValue("employer"));
                                if(!insRs.getString("planname").trim().equals("")) {
                                    setDocumentFieldValue("9d", insRs.getString("planname"));
                                } else {
                                    setDocumentFieldValue("9d", insRs.getString("name"));
                                }
                                setDocumentFieldValue("otherhpyes", "X");
                                setDocumentFieldValue("otherhpno", "");
                                break;
                            }
                        }
                    }
                    bchRs.close();
                }
                insRs.close();
            }
            
        } catch (Exception e) {
        }
    }
    
    private void doInsuredsInformation(String patientId) {
        if(getDocumentFieldValue("medicare") != null && getDocumentFieldValue("medicare").equals("X")) {

            // Set box 11 fields
            setDocumentFieldValue("insuredgroupnumber", "NONE");
            setDocumentFieldValue("otherhpno", "");
            setDocumentFieldValue("providername", "");
            setDocumentFieldValue("employer", "");
            setDocumentFieldValue("insuredmale", "");
            setDocumentFieldValue("insuredbirthyear", "");
            setDocumentFieldValue("insuredbirthmonth", "");
            setDocumentFieldValue("insuredbirthday", "");
            setDocumentFieldValue("otherhpyes", "");
            setDocumentFieldValue("insuredfemale", "");
            
            // Remove the address info at the top of the form
            setDocumentFieldValue("providername", "");
            setDocumentFieldValue("provideraddress1", "");
            setDocumentFieldValue("provideraddress2", "");
            setDocumentFieldValue("provideraddress3", "");
        } else {
            setInsuredsInformation(patientId);
        }
    }
    
    private void doBox12() throws Exception {
        if(resourceRs == null) {
            resourceRs=io.opnRS("select * from resources where id=" + resourceId);
        }
        resourceRs.beforeFirst();
        if(resourceRs.next()) {
            setDocumentFieldValue("12sig", resourceRs.getString("signature"));
            setDocumentFieldValue("12date", tools.utils.Format.formatDate(new java.util.Date(), "yyyyMMdd"));
        }
    }
    
    private void doBox13() throws Exception {
        if(resourceRs == null) {
            resourceRs=io.opnRS("select * from resources where id=" + resourceId);
        }
        resourceRs.beforeFirst();
        if(resourceRs.next()) {
            setDocumentFieldValue("13sig", resourceRs.getString("signature"));
        }        
    } 
    
    private void doBox14() throws Exception {
        /* RKW 11/11/08 - Added new Condition stuff
        patientRs.beforeFirst();

        setDocumentFieldValue("14yy", "");
        setDocumentFieldValue("14mm", "");
        setDocumentFieldValue("14dd", "");

        if(patientRs.next()) {
            if(!patientRs.getString("accidentdate").equals("0001-01-01")) {
                setDocumentFieldValue("14yy", patientRs.getString("accidentdate").substring(0,4));
                setDocumentFieldValue("14mm", patientRs.getString("accidentdate").substring(5,7));
                setDocumentFieldValue("14dd", patientRs.getString("accidentdate").substring(8));
            }
        }
        */
        ResultSet conditionRs=io.opnRS("select fromdate from patientconditions where id=" + this.conditionId);
        if(conditionRs.next()) {
            setDocumentFieldValue("14yy", patientRs.getString("fromdate").substring(0,4));
            setDocumentFieldValue("14mm", patientRs.getString("fromdate").substring(5,7));
            setDocumentFieldValue("14dd", patientRs.getString("fromdate").substring(8));            
        }
        conditionRs.close();
    }

    private void doBox19(String patientId) {

        try {
            StringBuffer codeList=new StringBuffer();
            String sqlStatement="SELECT diagnosisid, code FROM patientsymptoms " +
                                "join diagnosiscodes on diagnosisid=diagnosiscodes.id " +
                                "where patientid=" + patientId + " and code not in(";

            boolean firstTime=true;
            for(Enumeration e=diagnosisCodes.keys(); e.hasMoreElements();) {
                if(!firstTime) { codeList.append(", "); }
                codeList.append("'" + (String)e.nextElement() + "'");
                firstTime=false;
            }

            codeList.append(") order by sequence");

            PreparedStatement lPs=repeatingMap.getStatement().getConnection().prepareStatement(sqlStatement + codeList.toString());
            ResultSet lRs=lPs.executeQuery();

            codeList.delete(0,codeList.length());

            while(lRs.next()) {
                codeList.append(lRs.getString("code") + " ");
            }

            lRs.close();

            String temp=getDocumentFieldValue("field19");
            setDocumentFieldValue("field19",  temp + "  " + codeList.toString());
        } catch (Exception excpt) {
        }        
    }
    
    private void doBox20() {
        setDocumentFieldValue("field20n", "X");
    }
    
    private void doBox25() throws Exception {
        if(resourceRs == null) {
            resourceRs=io.opnRS("select * from resources where id=" + resourceId);
        }
        resourceRs.beforeFirst();
        if(resourceRs.next()) {
            setDocumentFieldValue("taxid", resourceRs.getString("taxid"));
        }        
    }

    private void doBox31() throws Exception {
        if(resourceRs == null) {
            resourceRs=io.opnRS("select * from resources where id=" + resourceId);
        }
        resourceRs.beforeFirst();
        if(resourceRs.next()) {
            setDocumentFieldValue("31sig", resourceRs.getString("name"));
        }        
    }
    
    // Supplier Address Information
    private void doBox32() throws Exception {
        ResultSet tmpRs=io.opnRS("select * from supplieraddress");
        if(tmpRs.next()) { setDocumentFieldsFromResultSet(tmpRs); }
        tmpRs.close();
        tmpRs=null;
    }

    // Facility Address Information
    private void doBox33() throws Exception {
        ResultSet tmpRs=io.opnRS("select * from facilityaddress where id=" + resourceId);
        if(tmpRs.next()) { setDocumentFieldsFromResultSet(tmpRs); }
        tmpRs.close();
        tmpRs=null;

        if(resourceRs == null) {
            resourceRs=io.opnRS("select * from resources where id=" + resourceId);
        }
        
        if(providerRs == null) {
            documentRs.beforeFirst();
            documentRs.next();
            providerRs=io.opnRS("select * from providers where id=" + providerId);
        }
        
        resourceRs.beforeFirst();
        if(resourceRs.next()) {
            setDocumentFieldValue("supplier", resourceRs.getString("name"));
            setDocumentFieldValue("pin", resourceRs.getString("pin"));
        }
        
        providerRs.beforeFirst();
        if(providerRs.next()) {
            setDocumentFieldValue("grp", providerRs.getString("ediid"));
        }
    }
    
    private void setDocumentFieldsFromResultSet(ResultSet rs) throws Exception{
        for(int x=1;x<=rs.getMetaData().getColumnCount();x++) {
            if(documentFields.containsKey(rs.getMetaData().getColumnName(x))) {
                setDocumentFieldValue(rs.getMetaData().getColumnName(x),rs.getString(x));
            }
        }
    }
    
    private void setInsuredsInformation(String patientId) {
            try {
                String patInsQuery="select case when billingaccount='' or billingaccount=accountnumber then " +
                                    "  (case when guarantor='' then accountnumber else guarantor end) " +
                                    "  else " +
                                    "  billingaccount " +
                                    "  end as guarantor " +
                                    "from patients " +
                                    "left join patientinsurance on patients.id=patientid where patients.id=" + patientId +
                                    " and patientinsurance.providerid=" + providerId;
                
                ResultSet patInsRs=io.opnRS(patInsQuery);
                if(patInsRs.next()) {
                    String guarantor=patInsRs.getString("guarantor");
                    patInsRs.close();
                    patInsRs=null;
                    // Try to get the insurance info based on the guarantor 
                    patInsRs=io.opnRS("select i.*, (select count(*) from insuranceinformation where patientid=i.patientId) as numberofproviders from insuranceinformation i join patients p on p.id=i.patientid where accountnumber='" + guarantor + "'  and i.providerid=" + providerId );
                    // If the guarantor does not have an insurance record, then check to see if it's held on the patient
                    if(!patInsRs.next()) {
                        patInsRs.close();
                        patInsRs=null;
                        patInsRs=io.opnRS("select *, count(*)  as numberofproviders from insuranceinformation where patientid=" + patientId + " and insuranceinformation.providerid=" + providerId + " group by patientid");
                    }
                    
                    ResultSet baRs=io.opnRS("select * from patients left join gender on patients.gender=gender.id where accountnumber='" + guarantor + "'");
                    
                    if(baRs.next()) {
                        String birthYear="";
                        String birthMonth="";
                        String birthDay="";
                        String otherHpNo="X";
                        String otherHpYes="";
                        String male="";
                        String female="";

                        // Check other healthcare provider
//                        if(patInsRs.getInt("numberofproviders")>1) {
//                            otherHpYes="X";
//                            otherHpNo="";
//                        }

                        // Check DOB information
                        if(!baRs.getString("dob").equals("0001-01-01") && !baRs.getString("dob").equals("1899-12-30")) {
                            birthYear=baRs.getString("dob").substring(0,4);
                            birthMonth=baRs.getString("dob").substring(5,7);
                            birthDay=baRs.getString("dob").substring(8);
                        }

                        if(baRs.getString("gender.gender").toUpperCase().equals("MALE")) { male="X"; }
                        if(baRs.getString("gender.gender").toUpperCase().equals("FEMALE")) { female="X"; }
                        
                        setDocumentFieldValue("insuredname", baRs.getString("lastname").trim() + ", " + baRs.getString("firstname"));
                        setDocumentFieldValue("insuredaddress", baRs.getString("address"));
                        setDocumentFieldValue("insuredcity", baRs.getString("city"));
                        setDocumentFieldValue("insuredstate", baRs.getString("state"));
                        setDocumentFieldValue("insuredzip", baRs.getString("zipcode"));
                        try {
                            setDocumentFieldValue("insuredareacode", baRs.getString("homephone").substring(0,3));
                            setDocumentFieldValue("insuredphonenumber", baRs.getString("homephone").substring(3));
                        } catch (Exception phoneException) {
                        }
                        setDocumentFieldValue("insuredmale", male);
                        setDocumentFieldValue("insuredbirthyear", birthYear);
                        setDocumentFieldValue("insuredbirthmonth", birthMonth);
                        setDocumentFieldValue("insuredbirthday", birthDay);
                        setDocumentFieldValue("insuredfemale", female);

                        patInsRs.beforeFirst();
                        if(patInsRs.next()) {
                            setDocumentFieldValue("insuredgroupnumber", patInsRs.getString("providergroup"));
                            setDocumentFieldValue("providernumber", patInsRs.getString("providernumber"));
                            setDocumentFieldValue("planname", patInsRs.getString("planname"));
                            setDocumentFieldValue("providername", patInsRs.getString("providerName"));
                            setDocumentFieldValue("provideraddress1", patInsRs.getString("provideraddress1"));
                            setDocumentFieldValue("provideraddress2", patInsRs.getString("provideraddress2"));
                            setDocumentFieldValue("provideraddress3", patInsRs.getString("provideraddress3"));
                        }
                    }
                    baRs.close();
                    baRs=null;
                }
                patInsRs.close();
//                patInsRs=null;

                // Now check to see if any of the HICFA fields are overridden for this patient/provider combination
                patInsRs=io.opnRS("select * from patientinsurance where patientid=" + patientId + " and providerid=" + providerId);
                if(patInsRs.next()) {
                    if(!patInsRs.getString("hicfa4").trim().equals("")) { setDocumentFieldValue("insuredname", patInsRs.getString("hicfa4")); }
                    if(!patInsRs.getString("hicfa7address").trim().equals("")) { setDocumentFieldValue("insuredaddress", patInsRs.getString("hicfa7address")); }
                    if(!patInsRs.getString("hicfa7city").trim().equals("")) { setDocumentFieldValue("insuredcity", patInsRs.getString("hicfa7city")); }
                    if(!patInsRs.getString("hicfa7state").trim().equals("")) { setDocumentFieldValue("insuredstate", patInsRs.getString("hicfa7state")); }
                    if(!patInsRs.getString("hicfa7zip").trim().equals("")) { setDocumentFieldValue("insuredzip", patInsRs.getString("hicfa7zip")); }
                    if(!patInsRs.getString("hicfa7phone").trim().equals("")) { setDocumentFieldValue("insuredareacode", patInsRs.getString("hicfa7phone").substring(0,3)); }
                    if(!patInsRs.getString("hicfa7phone").trim().equals("")) { setDocumentFieldValue("insuredphonenumber", patInsRs.getString("hicfa7phone").substring(3)); }
                    if(patInsRs.getInt("hicfa7sex") != 0) {
                        setDocumentFieldValue("insuredmale", "");
                        setDocumentFieldValue("insuredfemale", "");
                        if(patInsRs.getInt("hicfa7sex") == 1) { setDocumentFieldValue("insuredmale", "X"); }
                        if(patInsRs.getInt("hicfa7sex") == 2) { setDocumentFieldValue("insuredfemale", "X"); }
                    }
                    if(!patInsRs.getString("hicfa7dob").equals("0001-01-01")) {
                        setDocumentFieldValue("insuredbirthyear", patInsRs.getString("hicfa7dob").substring(0,4));
                        setDocumentFieldValue("insuredbirthmonth", patInsRs.getString("hicfa7dob").substring(5,7));
                        setDocumentFieldValue("insuredbirthday", patInsRs.getString("hicfa7dob").substring(8));                        
                    }
                }
                patInsRs.close();
                patInsRs=null;
            } catch (Exception box11Exception) {
                System.out.print(box11Exception.getMessage());
            }
    }

    public PagePrinter getPagePrinter() {
        return pagePrinter;
    }

    public void setPagePrinter(PagePrinter pagePrinter) {
        this.pagePrinter = pagePrinter;
    }

    public ResultSet getRepeatingRs() {
        return repeatingRs;
    }

    public void setRepeatingRs(ResultSet repeatingRs, String patientId) throws Exception {
        this.repeatingRs = repeatingRs;
        buildRepeatingItems(patientId);
    }

    public ResultSet getRepeatingMap() {
        return repeatingMap;
    }

    public void setRepeatingMap(ResultSet repeatingMap) {
        this.repeatingMap = repeatingMap;
    }

    public RWConnMgr getIo() {
        return io;
    }

    public void setIo(RWConnMgr io) {
        this.io = io;
    }

    private void setBatchRs(String batchId) throws Exception {
        if(batchRs == null) {
            this.batchRs=io.opnRS("select * from batches where id=" + batchId); 
            if(!batchRs.next()) {
                throw new Exception("Batch " + batchId + " does not exist");
            } else {
                providerId=batchRs.getString("provider");
            }
        }

    }
    
    private void setPatientRs(String patientId) throws Exception {
        patientRs=io.opnRS("select * from patients where id=" + patientId);
    }

    public int getRepeatingOffset() {
        return repeatingOffset;
    }

    public void setRepeatingOffset(int repeatingOffset) {
        this.repeatingOffset = repeatingOffset;
    }

    private void setResourceId(int resourceId) {
        this.resourceId = resourceId;
    }

    public String getProviderId() {
        return providerId;
    }

    public void setProviderId(String providerId) {
        this.providerId = providerId;
    }

    public int getConditionId() {
        return conditionId;
    }

    public void setConditionId(int conditionId) {
        this.conditionId = conditionId;
    }
}
